/*

Purpose: SystemTap script for tracing a specific kernel function, and
 measure time spend in function call to
 produce a histogram over latencies.

Literals passed in from the stap command line:
 arg1 = kernel or module function to record
 arg2 = optional setting how long to run (default 30 sec)

Invoke examples:
 stap -v histogram-kernel01.stp 'kernel.function("net_rx_action")'
 stap -v histogram-kernel01.stp 'kernel.function("tcp_collapse")'
 stap -v histogram-kernel01.stp 'kernel.function("netif_receive_skb_internal")'
 stap -v histogram-kernel01.stp 'module("ixgbe").function("ixgbe_clean_rx_irq")'

Credit:
 Based on Marek Majkowski work:
  https://github.com/majek/dump/blob/master/system-tap/histogram-kernel.stp
 Which is based on Brendan Gregg's work: http://www.brendangregg.com/

*/

global trace[64]
global etime[64]
global intervals

probe $1.call   {
        trace[cpu()] ++;
        if (trace[cpu()] == 1) {
                etime[cpu()] = gettimeofday_ns()
        }
}

probe $1.return {
        trace[cpu()] --
        if (trace[cpu()] <= 0) {
                t1_ns = etime[cpu()]
                trace[cpu()] = 0
                etime[cpu()] = 0
                if (t1_ns == 0) {
                        printf("Cpu %d was already in that function?\n", cpu());
                } else {
                        intervals <<< (gettimeofday_ns() - t1_ns)/1000
                }
        }
}

probe end {
        printf("Duration min:%dus avg:%dus max:%dus count:%d\n",
               @min(intervals), @avg(intervals), @max(intervals),
               @count(intervals))
        printf("Duration (us):\n")
        print(@hist_log(intervals));
        printf("\n")
}

/* Adjusting how long script runs */
%( $# > 1 %?
probe timer.sec($2) {
   %:
probe timer.sec(30) {
   %)
      exit();
}
